import telebot
from telebot import types
import time
from requests import ReadTimeout
from image_maker import congratulation_func
from envparse import env
from time import sleep
from parser_auto_ru import parse, quantity_auto_return

message_global = str()

TOKEN = env.str('TOKEN')

bot = telebot.TeleBot(TOKEN)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
mk_pct = 'üñº –°–¥–µ–ª–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É'
mk_parser = 'üì≤–°–ø–∞—Ä—Å–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
yes = '‚úÖ –î–∞'
no = 'üôÖ –ù–µ—Ç'
crysler = 'üõ∫Crysler'
haval = 'üöïHaval'
mini = 'üöóMini'
subaru = 'üöôSubaru'

welcome_message = 'üéâ*–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç*üéä\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n\n' \
                  '1. –°–¥–µ–ª–∞—Ç—å *–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É*\n' \
                  '2. –°–ø–∞—Ä—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ *–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ –≤ –ú–æ—Å–∫–≤–µ* —Å —Å–∞–π—Ç–∞ auto.ru\n\n' \
                  '‚è¨–î–ª—è –ø–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚è¨'

# –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.row(mk_pct, mk_parser)


def menu_restart(call):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    bot.send_message(call.from_user.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ üôÇ',
                     reply_markup=keyboard, parse_mode='Markdown')


@bot.message_handler(commands=['start'])
def menu(message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /START"""
    bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard, parse_mode='Markdown')


def menu_with_call(call):
    """–î—É–±–ª–∏—Ä—É–µ—Ç –º–µ–Ω—é, –Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ INLINE –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    bot.send_message(call.from_user.id, welcome_message, reply_markup=keyboard, parse_mode='Markdown')


def menu_with_message(message):
    """–î—É–±–ª–∏—Ä—É–µ—Ç –º–µ–Ω—é, –Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ INLINE –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard, parse_mode='Markdown')


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ—Ä–∞–∑ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—á–∞—Ç–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
# –≠—Ç–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –µ–≥–æ —Ñ—Ä–∞–∑–æ–π
phrases = {}

dict_for_answers = {'–ø—Ä–∏–≤–µ—Ç': '–ù—É –ø—Ä–∏–≤–µ—Ç–∏–∫',
                    '–ø–æ–∫–∞': '–Ω—É –¥–∞–≤–∞–π, –ø–æ–∫–∞',
                    '–∫—Ç–æ —è?': '—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫!',
                    '—Ä–∞—Å—Å–∫–∞–∂–∏ —Å–µ–∫—Ä–µ—Ç': '–Ω–µ–∞',
                    'unknow': '–Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–º–∞–Ω–¥—ã',
                    crysler: 'Crysler',
                    haval: 'Haval',
                    mini: 'Mini',
                    subaru: 'Subaru'
                    }


@bot.message_handler(content_types=['text'])
def start_message(message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞ –∏ –æ—Ç–¥–∞–µ—Ç –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_for_answers"""

    try:
        # –ò—â–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–µ
        bot.send_message(message.chat.id, message.from_user.first_name + ', ' + dict_for_answers[message.text.lower()])
    except KeyError as err:
        pass

    def make_picture(call, text_from_call):
        """–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
        image_to_send = congratulation_func(phrases[call.from_user.id])
        bot.send_photo(chat_id=call.from_user.id, photo=image_to_send)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -> –ø–∞—Ä—Å–∏—Ç—å
    if message.text == mk_parser:
        def go_to_parse(message):
            bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –º–∞—Ä–∫–∏ *{dict_for_answers[message.text]}* –Ω–∞—á–∞—Ç–∞\n\n'
                                              f'–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω —Ñ–∞–π–ª csv', parse_mode='Markdown')
            bot.send_document(message.chat.id, parse(variant=dict_for_answers[message.text]))

            bot.send_message(message.chat.id, f'–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—É—á–µ–Ω–æ: *{quantity_auto_return()} —à—Ç*',
                             parse_mode='Markdown')

            sleep(1)
            bot.send_message(message.chat.id, message.from_user.first_name +
                             ', –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –±–ª–∞–≥–æ üëÜ')
            sleep(1)
            bot.send_message(message.chat.id, '–õ–∞–¥–Ω–æ, —à—É—á—É üòé –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å?')
            sleep(1.5)
            menu_with_message(message)

        keyboard_for_parsing = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard_for_parsing.row(mini, subaru)
        keyboard_for_parsing.row(crysler, haval)

        bot.send_message(message.chat.id, message.from_user.first_name +
                         ' –≤—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:', parse_mode='Markdown', reply_markup=keyboard_for_parsing)


        bot.register_next_step_handler(message, go_to_parse)



    # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -> –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    elif message.text == mk_pct:
        bot.send_message(message.chat.id, message.from_user.first_name +
                         ' –≤–≤–µ–¥–∏ *–∫–æ—Ä–æ—Ç–∫–∏–π* —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:', parse_mode='Markdown')

        def check_text(message):
            """–ó–¥–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–π –ª–∏ —Ç–µ–∫—Å—Ç"""
            global text_from_call
            keyboard_check_text = types.InlineKeyboardMarkup()
            key_yes = types.InlineKeyboardButton(text=yes, callback_data='yes')
            key_no = types.InlineKeyboardButton(text=no, callback_data='no')
            keyboard_check_text.add(key_yes, key_no)
            text_from_call = message.text  # –¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            phrases.setdefault(message.chat.id, message.text)

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ñ—Ä–∞–∑, —á—Ç–æ –±—ã –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –∫–æ–º—É –∫–∞–∫–æ–π —Ñ—Ä–∞–∑–æ–π –æ—Ç–≤–µ—Ç–∏—Ç—å
            phrases.setdefault(message.chat.id, message.text)  # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ—Ç
            phrases[message.chat.id] = message.text  # –ê –∑–¥–µ—Å—å –º—ã –µ–≥–æ –º–µ–Ω—è–µ–º –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ

            bot.send_message(message.chat.id, f'"{text_from_call}" - –≠—Ç–æ –≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç?',
                             reply_markup=keyboard_check_text)

            @bot.callback_query_handler(func=lambda call: call.data == 'yes')
            def make_picture_final_yes(call):
                """–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–¥–∏—è, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –≤–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ï–°–õ–ò –î–ê"""
                make_picture(call=call, text_from_call=text_from_call)
                sleep(1.5)
                bot.send_message(call.from_user.id, '*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞!*', parse_mode='Markdown')
                sleep(1)
                menu_restart(call)

            @bot.callback_query_handler(func=lambda call: call.data == 'no')
            # @bot.callback_query_handlers
            def make_picture_final_no(call):
                """–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–¥–∏—è, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –≤–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ï–°–õ–ò –ù–ï–¢"""
                menu_with_call(call)

        # –ü–æ—Å—ã–ª–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.register_next_step_handler(message, check_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def telegram_polling():
    try:
        bot.polling(none_stop=True)

    except ReadTimeout as err:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        bot.stop_polling()
        time.sleep(3)
        telegram_polling()


if __name__ == '__main__':
    telegram_polling()
